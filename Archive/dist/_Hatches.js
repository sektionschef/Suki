class Hatches{constructor(t,s,e,i,h,_){this.color=_,this.x_start=t,this.y_start=s,this.x_stop=e,this.y_stop=i,this.distance_between_lines=h,this.hatches=[],this.buffer=createGraphics(width,height),this.chosen_axis=getRandomFromList(["yx","xy","x&y"]),this.createHatches(),this.show()}createHatches(){if("x"==this.chosen_axis){this.count_lines=(this.y_stop-this.y_start)/this.distance_between_lines;for(let t=0;t<this.count_lines;t++)this.hatches.push(new Hatch(createVector(this.x_start,this.y_start+this.distance_between_lines*t),createVector(this.x_stop,this.y_start+this.distance_between_lines*t),this.color,this.buffer))}else if("y"==this.chosen_axis){this.count_lines=(this.x_stop-this.x_start)/this.distance_between_lines;for(let t=0;t<this.count_lines;t++)this.hatches.push(new Hatch(createVector(this.x_start+this.distance_between_lines*t,this.y_start),createVector(this.x_start+this.distance_between_lines*t,this.y_stop),this.color,this.buffer))}else if("xy"==this.chosen_axis){this.count_lines=(this.x_stop-this.x_start)/this.distance_between_lines;for(let t=0;t<this.count_lines;t++)this.hatches.push(new Hatch(createVector(this.x_start+this.distance_between_lines*t,this.y_start),createVector(this.x_stop,this.y_stop-this.distance_between_lines*t),this.color,this.buffer));this.count_lines=(this.y_stop-this.y_start)/this.distance_between_lines;for(let t=1;t<this.count_lines;t++)this.hatches.push(new Hatch(createVector(this.x_start,this.y_start+this.distance_between_lines*t),createVector(this.x_stop-this.distance_between_lines*t,this.y_stop),this.color,this.buffer))}else if("yx"==this.chosen_axis){this.count_lines=(this.x_stop-this.x_start)/this.distance_between_lines;for(let t=0;t<this.count_lines;t++)this.hatches.push(new Hatch(createVector(this.x_start+this.distance_between_lines*t,this.y_stop),createVector(this.x_stop,this.y_start+this.distance_between_lines*t),this.color,this.buffer));this.count_lines=(this.y_stop-this.y_start)/this.distance_between_lines;for(let t=1;t<this.count_lines;t++)this.hatches.push(new Hatch(createVector(this.x_start,this.y_stop-this.distance_between_lines*t),createVector(this.x_stop-this.distance_between_lines*t,this.y_start),this.color,this.buffer))}else if("blank"==this.chosen_axis);else if("x&y"==this.chosen_axis){this.count_lines=(this.y_stop-this.y_start)/this.distance_between_lines;for(let t=0;t<this.count_lines;t++)this.hatches.push(new Hatch(createVector(this.x_start,this.y_start+this.distance_between_lines*t),createVector(this.x_stop,this.y_start+this.distance_between_lines*t),this.color,this.buffer));this.count_lines=(this.x_stop-this.x_start)/this.distance_between_lines;for(let t=0;t<this.count_lines;t++)this.hatches.push(new Hatch(createVector(this.x_start+this.distance_between_lines*t,this.y_start),createVector(this.x_start+this.distance_between_lines*t,this.y_stop),this.color,this.buffer))}}add(t){this.hatches.push(t)}show(){for(;0==this.check_all_complete();)for(var t of this.hatches)t.update(),t.show()}check_all_complete(){if(0==this.all_lines_complete||this.hatches.length>0){for(var t of(this.hatches_alive_status=[],this.hatches))this.hatches_alive_status.push(t.alive);return this.hatches_alive_status.every((t=>!1===t))}return!1}}